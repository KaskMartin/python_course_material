<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Scientific Programming with Python</title><link href="http://schryer.github.io/python_course_material/" rel="alternate"></link><link href="http://schryer.github.io/python_course_material/feeds/all.atom.xml" rel="self"></link><id>http://schryer.github.io/python_course_material/</id><updated>2014-05-21T12:00:00+03:00</updated><entry><title>Lesson 1: Reading Python Code.</title><link href="http://schryer.github.io/python_course_material/python/1" rel="alternate"></link><updated>2014-05-21T12:00:00+03:00</updated><author><name>David Schryer</name></author><id>tag:schryer.github.io/python_course_material,2014-05-21:python/1</id><summary type="html">&lt;h2&gt;Python is an &lt;strong&gt;unnatural&lt;/strong&gt;&amp;nbsp;language.&lt;/h2&gt;
&lt;p&gt;Even if many words used in Python resemble English words, they
are interpreted in a very different way.  It is best if one
does not associate the English meaning with the Python meaning
and instead relearns each word in&amp;nbsp;turn.&lt;/p&gt;
&lt;h3&gt;Think in &lt;em&gt;tokens&lt;/em&gt;, not words with&amp;nbsp;punctuation.&lt;/h3&gt;
&lt;p&gt;The words used in programs are not words, they are &lt;em&gt;tokens&lt;/em&gt; that are interpreted
as one unit of thought with a single meaning depending on the context. All other
symbols (i.e. &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;)
and sometimes combinations of symbols (i.e. &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;) are also &lt;em&gt;tokens&lt;/em&gt;.  All
tokens are interpreted
with the same&amp;nbsp;rules.&lt;/p&gt;
&lt;h3&gt;What you write is not a text, it is&amp;nbsp;code.&lt;/h3&gt;
&lt;p&gt;Instead of writing text, computer people write code because of its natural
tendency to be incomprehensible.
All effort should be made to make the code you write easy for &lt;strong&gt;humans&lt;/strong&gt; to read&amp;nbsp;(interpret).&lt;/p&gt;
&lt;h3&gt;Think in &lt;em&gt;statements&lt;/em&gt; not&amp;nbsp;sentences.&lt;/h3&gt;
&lt;p&gt;Programs are made up of a series of &lt;em&gt;statements&lt;/em&gt; made up of tokens (i.e. &lt;code&gt;e =
2.718281828&lt;/code&gt;) which can roughly
be thought of as sentences. However, unlike natural language, one
does not read each &lt;em&gt;statement&lt;/em&gt; in consecutive order to reach the end of your
code.
Instead, one must read Python statements in the order defined by the rules of
the language. This may be confusing to the novice because statements written in
the code are sometimes skipped and others are read many many many times even
though
they appear only once; Reading code is almost never top to bottom and usually
involves jumping around, however,
all effort should be made to make the code you write easy for &lt;strong&gt;humans&lt;/strong&gt; to&amp;nbsp;interpret.&lt;/p&gt;
&lt;h3&gt;Code is never&amp;nbsp;ambiguous.&lt;/h3&gt;
&lt;p&gt;Python code is interpreted by the python interpreter.
Given the same input, your computer program should always do the same thing.
One way to learn how to read code is to ask the interpreter&amp;nbsp;questions.&lt;/p&gt;
&lt;h2&gt;Execute each &lt;em&gt;cell&lt;/em&gt; in this IPython notebook by pressing &lt;code&gt;Ctrl&lt;/code&gt;, holding&amp;nbsp;it&lt;/h2&gt;
&lt;p&gt;down, and then pressing &lt;code&gt;Enter&lt;/code&gt; (&lt;code&gt;Ctrl-Enter&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The statement &lt;code&gt;5 + 2&lt;/code&gt; made up of the three tokens &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; causes Python to
add these two numbers and return the result.  We did not specify what to do with
this result and in this case it was spit out onto the&amp;nbsp;screen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;=&lt;/code&gt; token tells our program to store the output of adding these numbers into
a &lt;em&gt;variable&lt;/em&gt; named &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We cannot tell the program to store the contents of &lt;code&gt;a&lt;/code&gt; into a number. Variables
cannot start with&amp;nbsp;numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; token means test if the thing on the left is the same as the thing on
the&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;IPython provides a &lt;code&gt;help&lt;/code&gt; function.&amp;nbsp;Try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will learn things you never knew about integers, and a whole lot about
operators like &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A shorter version of help is available but it only works on variables (like &lt;code&gt;b&lt;/code&gt;
below), not &lt;em&gt;expressions&lt;/em&gt; like &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;41**(3 /2.0)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Exercise: Convert English into&amp;nbsp;Python.&lt;/h2&gt;
&lt;p&gt;Write three Python statements in the next cell to calculate the area swept out
by a planet orbiting the sun.  The first will store the maximum distance the
planet moves away from the sun during its orbit, the second will store the
minimum distance from the sun, and the third will multiply these together with
&lt;mathjax&gt;$\pi$&lt;/mathjax&gt; and store the value in a variable &lt;code&gt;planet_area&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hint: The value of &lt;mathjax&gt;$\pi$&lt;/mathjax&gt; can be retrieved from the Python &lt;code&gt;math&lt;/code&gt; &lt;em&gt;module&lt;/em&gt; as
seen&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;
&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;




&lt;span class="mf"&gt;3.141592653589793&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="Python"></category></entry></feed>