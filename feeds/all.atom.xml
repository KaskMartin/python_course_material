<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Scientific Programming with Python</title><link href="http://schryer.github.io/python_course_material/" rel="alternate"></link><link href="http://schryer.github.io/python_course_material/feeds/all.atom.xml" rel="self"></link><id>http://schryer.github.io/python_course_material/</id><updated>2014-09-02T11:00:00+03:00</updated><entry><title>Introducing containers in Python</title><link href="http://schryer.github.io/python_course_material/python_3.html" rel="alternate"></link><updated>2014-09-02T11:00:00+03:00</updated><author><name>David Schryer</name></author><id>tag:schryer.github.io,2014-09-02:python_course_material/python_3.html</id><summary type="html">&lt;p&gt;Download original file: &lt;a href="http://schryer.github.io/python_course_material/notebooks/3_python_strings_as_containers.ipynb"&gt;3_python_strings_as_containers.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Python &lt;em&gt;containers&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Python &lt;em&gt;containers&lt;/em&gt; collect items together in one single collection that can be
stored
using a single variable&amp;nbsp;name.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.python.org" title="Python programming language"&gt;Python&lt;/a&gt; containers hold fundamental &lt;a href="http://www.python.org" title="Python programming language"&gt;Python&lt;/a&gt; types.  One exception are strings
which are
both a fundamental type and a &lt;a href="http://www.python.org" title="Python programming language"&gt;Python&lt;/a&gt;&amp;nbsp;collection.&lt;/p&gt;
&lt;h3&gt;Strings&lt;/h3&gt;
&lt;p&gt;Strings can be made by enclosing text with either single or double quotation
characters (&amp;#8216;) or&amp;nbsp;(&amp;#8220;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Stan_Ulam_said&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Whatever is worth saying can be stated in fifty words or less.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;I_say&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;Most&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;expressed&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fifty&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;statements&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;less&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Line&amp;nbsp;breaks&lt;/h4&gt;
&lt;p&gt;Line breaks can be added to a &lt;a href="http://www.python.org" title="Python programming language"&gt;Python&lt;/a&gt; string by using a line feed control
character (&lt;code&gt;\n&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;John_Tukey_said&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;approximate&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;worth&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exact&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;approximate&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Multiline&amp;nbsp;strings&lt;/h4&gt;
&lt;p&gt;Line breaks can also be added using multiline strings. These are made by
starting and ending with three quotation characters (&lt;code&gt;''' text '''&lt;/code&gt;) or (&lt;code&gt;"""
text """&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;John_Tukey_said&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;approximate&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;worth&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt; &lt;span class="n"&gt;deal&lt;/span&gt; 
&lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;exact&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;approximate&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Triple quotes can be used to make strings that contain quote&amp;nbsp;characters:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Even_though_the_student_knew_the_problem_was_ill_poised&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;professor&lt;/span&gt; &lt;span class="n"&gt;strongly&lt;/span&gt; &lt;span class="n"&gt;advised&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="s"&gt;&amp;quot;Do the calculation!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using Containers in&amp;nbsp;Python&lt;/h2&gt;
&lt;p&gt;Containers allow us to perform useful operations on collections of&amp;nbsp;types.&lt;/p&gt;
&lt;h3&gt;Using the word &lt;code&gt;in&lt;/code&gt; to test is something is &lt;em&gt;in&lt;/em&gt;side a&amp;nbsp;container.&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;True&lt;/code&gt; if an item is contained in a container object, otherwise &lt;code&gt;False&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;fifty&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Stan_Ulam_said&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;not&lt;/code&gt; keyword can be used to test the opposite (The substring &amp;#8216;50&amp;#8217; is &lt;code&gt;not&lt;/code&gt;
in this &lt;code&gt;str&lt;/code&gt; object):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Stan_Ulam_said&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Elements of &lt;em&gt;list-like&lt;/em&gt; containers (like strings) can be accessed by&amp;nbsp;index&lt;/h3&gt;
&lt;p&gt;(starting at &lt;code&gt;0&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Multiple elements can be accessed at once by&amp;nbsp;slicing:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Leaving out one of these indicies means &lt;strong&gt;to the beginning&lt;/strong&gt; or &lt;strong&gt;to the end&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Negative index values mean &lt;strong&gt;number of index values from the&amp;nbsp;end&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;An index of &lt;code&gt;-1&lt;/code&gt; means the last item in the &lt;em&gt;list-like&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Slicing also works with negative&amp;nbsp;indicies:&lt;/h3&gt;
&lt;p&gt;The following means take the slice starting &lt;strong&gt;five index values from the end&lt;/strong&gt;
(&lt;code&gt;-5&lt;/code&gt;) and slice &lt;strong&gt;to the end&lt;/strong&gt; (&lt;code&gt;:&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;You can also skip elements in regular steps when&amp;nbsp;slicing&lt;/h3&gt;
&lt;p&gt;In the following cases we slice in steps of &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The number of items in a container is its&amp;nbsp;length:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is the same as calling the hidden function inside containers &lt;code&gt;__len__&lt;/code&gt;, but
this is rarely used&amp;nbsp;directly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The smallest and largest items in a container are found using &lt;code&gt;min&lt;/code&gt; and&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;max&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However, this is not often useful for&amp;nbsp;strings.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use the &lt;code&gt;.index&lt;/code&gt; function to find the index of the first occurance&amp;nbsp;of&lt;/h3&gt;
&lt;p&gt;something in a&amp;nbsp;container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;I_say&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;fifty&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;Stan_Ulam_said&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;fifty&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This proves that I said &lt;code&gt;fifty&lt;/code&gt; first&amp;#8230;&lt;/p&gt;
&lt;h3&gt;Use the &lt;code&gt;.count&lt;/code&gt; function to find the number of times an object occurs in&amp;nbsp;a&lt;/h3&gt;
&lt;p&gt;container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;John_Tukey_said&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;approximate&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Exercise:  Try to use all of the properties and functions contained in&amp;nbsp;string&lt;/h2&gt;
&lt;p&gt;types.&lt;/p&gt;
&lt;p&gt;Hint: These are accessed using the dot notation.  Try typing a variable name
like &lt;code&gt;I_say&lt;/code&gt; followed by a dot, and then hitting the &lt;code&gt;Tab&lt;/code&gt; key. (i.e. &lt;code&gt;I_say.&lt;/code&gt;
followed by one or more &lt;code&gt;Tab&lt;/code&gt; keystrokes).  Try using the build-in &lt;a href="http://www.python.org" title="Python programming language"&gt;Python&lt;/a&gt; help
function. (i.e. &lt;code&gt;help(I_say)&lt;/code&gt;)&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>Fundamental types in Python</title><link href="http://schryer.github.io/python_course_material/python_2.html" rel="alternate"></link><updated>2014-09-02T10:00:00+03:00</updated><author><name>David Schryer</name></author><id>tag:schryer.github.io,2014-09-02:python_course_material/python_2.html</id><summary type="html">&lt;p&gt;Download original file: &lt;a href="http://schryer.github.io/python_course_material/notebooks/2_fundamental_python_types.ipynb"&gt;2_fundamental_python_types.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Fundamental Python&amp;nbsp;types&lt;/h2&gt;
&lt;p&gt;Python has a number of fundamental types.  Please explore the code below to see
what they&amp;nbsp;are.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000000000000000000000000&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The boolean type can contain the values &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; which&amp;nbsp;always&lt;/h3&gt;
&lt;p&gt;start with capital&amp;nbsp;letters:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;d1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;d2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Complex numbers are a fundamental type: note the use of &lt;code&gt;j&lt;/code&gt; to specify&amp;nbsp;the&lt;/h3&gt;
&lt;p&gt;imaginary&amp;nbsp;part&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;
&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The &lt;code&gt;None&lt;/code&gt; type&lt;/h3&gt;
&lt;p&gt;This type is very commonly used and also starts with a capital &lt;code&gt;N&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;All types have&amp;nbsp;properties&lt;/h2&gt;
&lt;p&gt;The variable &lt;code&gt;c&lt;/code&gt; defined above is an integer type.  This type has the following
properties that are accessed with dot notation.  The dot can be thought of as
meaning &amp;#8220;get something from the thing on the left&amp;#8221; (in this case &lt;code&gt;c&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bit_length&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conjugate&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;denominator&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imag&lt;/span&gt;    &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numerator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;c.real&lt;/p&gt;
&lt;p&gt;In this case &lt;code&gt;c.bit_length&lt;/code&gt; is actually a function which must be &lt;em&gt;called&lt;/em&gt; using
round brackets &lt;code&gt;()&lt;/code&gt;to use (more on functions&amp;nbsp;later).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bit_length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Some properties are&amp;nbsp;hidden&lt;/h2&gt;
&lt;p&gt;Although &lt;code&gt;f&lt;/code&gt; is a &lt;code&gt;None&lt;/code&gt; type, it still has hidden&amp;nbsp;properties.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__sizeof__&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Many types have common&amp;nbsp;properties&lt;/h2&gt;
&lt;p&gt;Python has been designed such that its types are as compatible as possible with
each other.
This is done by giving them common properties so that the same Python code is
able to process different&amp;nbsp;types.&lt;/p&gt;
&lt;h2&gt;Exercise:  Find the common properties between the types listed&amp;nbsp;above&lt;/h2&gt;</summary><category term="Python"></category></entry><entry><title>Python is not a natural language</title><link href="http://schryer.github.io/python_course_material/python_1.html" rel="alternate"></link><updated>2014-09-02T09:00:00+03:00</updated><author><name>David Schryer</name></author><id>tag:schryer.github.io,2014-09-02:python_course_material/python_1.html</id><summary type="html">&lt;p&gt;Download original file: &lt;a href="http://schryer.github.io/python_course_material/notebooks/1_reading_python_code.ipynb"&gt;1_reading_python_code.ipynb&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Python is an &lt;strong&gt;unnatural&lt;/strong&gt;&amp;nbsp;language.&lt;/h2&gt;
&lt;p&gt;Even if many words used in Python resemble English words, they
are interpreted in a very different way.  It is best if one
does not associate the English meaning with the Python meaning
and instead relearns each word in&amp;nbsp;turn.&lt;/p&gt;
&lt;h3&gt;Think in &lt;em&gt;tokens&lt;/em&gt;, not words with&amp;nbsp;punctuation.&lt;/h3&gt;
&lt;p&gt;The words used in programs are not words, they are &lt;em&gt;tokens&lt;/em&gt; that are interpreted
as one unit of thought with a single meaning depending on the context. All other
symbols (i.e. &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;)
and sometimes combinations of symbols (i.e. &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;) are also &lt;em&gt;tokens&lt;/em&gt;.  All
tokens are interpreted
with the same&amp;nbsp;rules.&lt;/p&gt;
&lt;h3&gt;What you write is not a text, it is&amp;nbsp;code.&lt;/h3&gt;
&lt;p&gt;Instead of writing text, computer people write code because of its natural
tendency to be incomprehensible.
All effort should be made to make the code you write easy for &lt;strong&gt;humans&lt;/strong&gt; to read&amp;nbsp;(interpret).&lt;/p&gt;
&lt;h3&gt;Think in &lt;em&gt;statements&lt;/em&gt; not&amp;nbsp;sentences.&lt;/h3&gt;
&lt;p&gt;Programs are made up of a series of &lt;em&gt;statements&lt;/em&gt; made up of tokens (i.e. &lt;code&gt;e =
2.718281828&lt;/code&gt;) which can roughly
be thought of as sentences. However, unlike natural language, one
does not read each &lt;em&gt;statement&lt;/em&gt; in consecutive order to reach the end of your
code.
Instead, one must read Python statements in the order defined by the rules of
the language. This may be confusing to the novice because statements written in
the code are sometimes skipped and others are read many many many times even
though
they appear only once; Reading code is almost never top to bottom and usually
involves jumping around, however,
all effort should be made to make the code you write easy for &lt;strong&gt;humans&lt;/strong&gt; to&amp;nbsp;interpret.&lt;/p&gt;
&lt;h3&gt;Code is never&amp;nbsp;ambiguous.&lt;/h3&gt;
&lt;p&gt;Python code is interpreted by the python interpreter.
Given the same input, your computer program should always do the same thing.
One way to learn how to read code is to ask the interpreter&amp;nbsp;questions.&lt;/p&gt;
&lt;h2&gt;Execute each &lt;em&gt;cell&lt;/em&gt; in this IPython notebook by pressing &lt;code&gt;Ctrl&lt;/code&gt;, holding&amp;nbsp;it&lt;/h2&gt;
&lt;p&gt;down, and then pressing &lt;code&gt;Enter&lt;/code&gt; (&lt;code&gt;Ctrl-Enter&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The statement &lt;code&gt;5 + 2&lt;/code&gt; made up of the three tokens &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt; causes Python to
add these two numbers and return the result.  We did not specify what to do with
this result and in this case it was spit out onto the&amp;nbsp;screen.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;=&lt;/code&gt; token tells our program to store the output of adding these numbers into
a &lt;em&gt;variable&lt;/em&gt; named &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We cannot tell the program to store the contents of &lt;code&gt;a&lt;/code&gt; into a number. Variables
cannot start with&amp;nbsp;numbers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; token means test if the thing on the left is the same as the thing on
the&amp;nbsp;right.&lt;/p&gt;
&lt;p&gt;IPython provides a &lt;code&gt;help&lt;/code&gt; function.&amp;nbsp;Try:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will learn things you never knew about integers, and a whole lot about
operators like &lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A shorter version of help is available but it only works on variables (like &lt;code&gt;b&lt;/code&gt;
below), not &lt;em&gt;expressions&lt;/em&gt; like &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;41**(3 /2.0)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Exercise: Convert English into&amp;nbsp;Python.&lt;/h2&gt;
&lt;p&gt;Write three Python statements in the next cell to calculate the area swept out
by a planet orbiting the sun.  The first will store the maximum distance the
planet moves away from the sun during its orbit, the second will store the
minimum distance from the sun, and the third will multiply these together with
&lt;mathjax&gt;$\pi$&lt;/mathjax&gt; and store the value in a variable &lt;code&gt;planet_area&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Hint: The value of &lt;mathjax&gt;$\pi$&lt;/mathjax&gt; can be retrieved from the Python &lt;code&gt;math&lt;/code&gt; &lt;em&gt;module&lt;/em&gt; as
seen&amp;nbsp;below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;
&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;




&lt;span class="mf"&gt;3.141592653589793&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Variable&amp;nbsp;names&lt;/h2&gt;
&lt;p&gt;Variable names in Python can contain alphanumerical characters &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;A-Z&lt;/code&gt;,
&lt;code&gt;0-9&lt;/code&gt; and some special characters such as &lt;code&gt;_&lt;/code&gt;. Variable names cannot start with
a&amp;nbsp;number.&lt;/p&gt;
&lt;p&gt;By convension, variable names start with a lower-case letter, and Class names
start with a capital&amp;nbsp;letter.&lt;/p&gt;
&lt;p&gt;In addition, there are a number of Python keywords that cannot be used as
variable names. These keywords&amp;nbsp;are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;and&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;del&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elif&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;except&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;import&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="n"&gt;pass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;try&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yield&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Common python functions and modules should also not be used as variable names.
If it is commonly imported,
&lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; use it as a variable&amp;nbsp;name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;....&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;longer&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Acceptable variable&amp;nbsp;names&lt;/h3&gt;
&lt;p&gt;These are all legal variable&amp;nbsp;names.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.4&lt;/span&gt;
&lt;span class="n"&gt;x23982342&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;56.8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Use descriptive variable&amp;nbsp;names&lt;/h3&gt;
&lt;p&gt;Use variable names that describe what they&amp;nbsp;contain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;number_of_cats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;span class="n"&gt;area_of_cat_house&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.4&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="n"&gt;meters&lt;/span&gt;
&lt;span class="n"&gt;cat_fights_per_day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;56.8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;script type= "text/javascript"&gt;
    if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
        var mathjaxscript = document.createElement('script');
        mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
        mathjaxscript.type = 'text/javascript';
        mathjaxscript.src = 'https:' == document.location.protocol
                ? 'https://c328740.ssl.cf1.rackcdn.com/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML'
                : 'http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        mathjaxscript[(window.opera ? "innerHTML" : "text")] =
            "MathJax.Hub.Config({" +
            "    config: ['MMLorHTML.js']," +
            "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
            "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
            "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
            "    displayAlign: 'center'," +
            "    displayIndent: '0em'," +
            "    showMathMenu: true," +
            "    tex2jax: { " +
            "        inlineMath: [ ['$','$'] ], " +
            "        displayMath: [ ['$$','$$'] ]," +
            "        processEscapes: true," +
            "        preview: 'TeX'," +
            "    }, " +
            "    'HTML-CSS': { " +
            "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'black ! important'} }" +
            "    } " +
            "}); ";
        (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
    }
&lt;/script&gt;
</summary><category term="Python"></category></entry></feed>